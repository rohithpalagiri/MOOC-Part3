{"version":3,"sources":["services/phone.js","App.js","index.js"],"names":["baseUrl","personObject","axios","post","then","response","data","id","delete","toString","console","log","put","Filter","handleSearchChange","value","onChange","PersonForm","handleSubmit","handleNameChange","handleNumberChange","newName","newNumber","onSubmit","type","Persons","searchResult","handleDelete","map","x","key","name","number","onClick","Notification","message","className","App","useState","persons","setPersons","setNewName","setNewNumber","newSearch","setNewSearch","showFiltered","setShowFiltered","setMessage","messageType","setMessageType","useEffect","get","phoneService","filter","toLowerCase","includes","e","target","length","event","preventDefault","some","findUpdatedContact","find","window","confirm","person","setTimeout","catch","returnedContact","concat","nameValue","numberValue","deletedContact","updatedPersons","ReactDOM","render","document","getElementById"],"mappings":"mOACMA,EAAU,eAkBD,EAhBO,SAAAC,GAGlB,OAFgBC,IAAMC,KAAKH,EAASC,GAErBG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa9B,EAVO,SAACC,GAGnB,OAFgBL,IAAMM,OAAOR,EAAU,IAAMO,EAAGE,YAEjCL,MAAK,SAAAC,GAAQ,OAAIK,QAAQC,IAAI,gBAAiBN,EAASC,UAO3D,EAJO,SAACC,EAAIN,GACvB,OAAOC,IAAMU,IAAIZ,EAAU,IAAMO,EAAGE,WAAYR,IAGrC,EAA8CD,ECfvDa,EAAS,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,mBAAoBC,EAAW,EAAXA,MACnC,OACE,kDAAuB,2BAAOC,SAAUF,EAAoBC,MAAOA,IAAnE,MAIEE,EAAa,SAAC,GAA8E,IAA7EC,EAA4E,EAA5EA,aAAcC,EAA8D,EAA9DA,iBAAkBC,EAA4C,EAA5CA,mBAAoBC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,UAChF,OACE,0BAAMC,SAAUL,GACZ,sCACQ,2BAAOF,SAAUG,EAAkBJ,MAAOM,KAElD,uCACS,2BAAOL,SAAUI,EAAoBL,MAAOO,KAErD,6BACE,4BAAQE,KAAK,UAAb,UAMJC,EAAU,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,aAAcC,EAAiB,EAAjBA,aAC9B,OACE,6BACKD,EAAaE,KAAI,SAACC,GAAD,OAClB,wBAAIC,IAAKD,EAAEE,MAAOF,EAAEE,KAApB,IAA2BF,EAAEG,OAA7B,IAAqC,4BAAQC,QAAS,kBAAMN,EAAaE,KAApC,gBAKvCK,EAAe,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,QAASX,EAAU,EAAVA,KAC9B,OAAe,OAAZW,EACM,KAGP,yBAAKC,UAAoB,YAATZ,EAAqB,UAAa,SAAUW,IAsHjDE,EAlHH,WAAO,IAAD,EACcC,mBAAS,IADvB,mBACTC,EADS,KACAC,EADA,OAEgBF,mBAAS,IAFzB,mBAERjB,EAFQ,KAECoB,EAFD,OAGoBH,mBAAS,IAH7B,mBAGRhB,EAHQ,KAGGoB,EAHH,OAIoBJ,mBAAS,IAJ7B,mBAIRK,EAJQ,KAIGC,EAJH,OAK0BN,mBAAS,SALnC,mBAKRO,EALQ,KAKMC,EALN,OAMeR,mBAAS,IANxB,mBAMRH,EANQ,KAMCY,EAND,OAOuBT,mBAAS,MAPhC,mBAORU,EAPQ,KAOKC,EAPL,KAShBC,qBAAU,WACRhD,IACGiD,IAAIC,GACJhD,MAAK,SAAAC,GACJmC,EAAWnC,EAASC,WAEvB,IAEH,IA+EMoB,EAAemB,EACrBN,EAAQc,QAAO,SAACxB,GACd,OAAOA,EAAEE,KAAKuB,cAAcC,SAASZ,EAAUW,kBAE/Cf,EAEF,OACE,6BACE,yCACA,kBAAC,EAAD,CAAcJ,QAASA,EAASX,KAAMwB,IACtC,kBAAC,EAAD,CAAQlC,mBA/Ee,SAAC0C,GAE1BZ,EAAaY,EAAEC,OAAO1C,OAEnB4B,EAAUe,OACXZ,GAAgB,GAEhBA,GAAgB,IAwEgC/B,MAAO4B,IACvD,kBAAC,EAAD,CAAYzB,aArEK,SAACyC,GACpBA,EAAMC,iBACN,IAAM3D,EAAe,CACnB8B,KAAMV,EACNW,OAAQV,GAKV,GAFkBiB,EAAQsB,MAAK,SAAChC,GAAD,OAAOA,EAAEE,OAAS9B,EAAa8B,QAEjD,CAEX,IAAM+B,EAAqBvB,EAAQwB,MAAK,SAAClC,GAAD,OAAOA,EAAEE,OAAS9B,EAAa8B,QAEpEiC,OAAOC,QAAP,kDAA0DhE,EAAa8B,KAAvE,OACDqB,EAA2BU,EAAmBvD,GAAIN,GACjDG,MAAK,SAAAC,GACJmC,EAAWD,EAAQX,KAAI,SAACsC,GAAD,OAAYA,EAAO3D,KAAOuD,EAAmBvD,GAAK2D,EAAS7D,EAASC,SAC3FyC,EAAW,WAAD,OAAY1C,EAASC,KAAKyB,OACpCkB,EAAe,WACfkB,YAAW,WACTpB,EAAW,QACV,QAEJqB,OAAM,SAAA/D,GACL0C,EAAW,kBAAD,OAAmBe,EAAmB/B,KAAtC,8BACVkB,EAAe,QACfkB,YAAW,WACTpB,EAAW,QACV,aAKPK,EAA2BnD,GACxBG,MAAK,SAAAiE,GACJ7B,EAAWD,EAAQ+B,OAAOD,IAC1BtB,EAAW,SAAD,OAAUsB,EAAgBtC,OACpCkB,EAAe,WACfkB,YAAW,WACTpB,EAAW,QACV,KACHN,EAAW,QA4ByBtB,iBA1FnB,SAACqC,GACxBA,EAAEI,iBACFnB,EAAWe,EAAEC,OAAO1C,QAwF0DK,mBArFrD,SAACoC,GAC1BA,EAAEI,iBACFlB,EAAac,EAAEC,OAAO1C,QAmFgGwD,UAAWlD,EAASmD,YAAalD,IACrJ,uCACA,kBAAC,EAAD,CAASK,aAzBQ,SAACE,GACpB,OAAGmC,OAAOC,QAAP,iBAAyBpC,EAAEE,KAA3B,MACMqB,EAA2BvB,EAAEtB,IACnCH,MAAK,SAAAqE,GACJ,IAAMC,EAAiBnC,EAAQc,QAAO,SAAAa,GAAM,OAAIA,EAAO3D,KAAOsB,EAAEtB,MAChEiC,EAAWkC,WAGb,GAiBqChD,aAAcA,M,MCpJzDiD,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.85785a4b.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/api/persons';\r\n\r\nconst createContact = personObject =>{\r\n    const request = axios.post(baseUrl, personObject)\r\n    \r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst deleteContact = (id) =>{\r\n    const request = axios.delete(baseUrl + '/' + id.toString())\r\n\r\n    return request.then(response => console.log('Delete data: ', response.data))\r\n}\r\n\r\nconst updateContact = (id, personObject) =>{\r\n    return axios.put(baseUrl + '/' + id.toString(), personObject);\r\n}\r\n\r\nexport default {createContact, deleteContact, updateContact, baseUrl}","import React, { useState, useEffect } from 'react'\nimport phoneService from './services/phone'\nimport axios from 'axios'\n\nconst Filter = ({handleSearchChange, value}) => {\n  return (\n    <div>filter shown with <input onChange={handleSearchChange} value={value} /> </div>\n  )\n}\n\nconst PersonForm = ({handleSubmit, handleNameChange, handleNumberChange, newName, newNumber}) => {\n  return(\n    <form onSubmit={handleSubmit}>\n        <div>\n          name: <input onChange={handleNameChange} value={newName}/>\n        </div>\n        <div>\n          number <input onChange={handleNumberChange} value={newNumber}/>\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n  )\n}\n\nconst Persons = ({searchResult, handleDelete}) =>{\n  return(\n    <div>\n        {searchResult.map((x) => \n        <li key={x.name}>{x.name} {x.number} <button onClick={() => handleDelete(x)}>delete</button></li>)}\n    </div>\n  )\n}\n\nconst Notification = ({message, type}) => {\n  if(message === null){\n    return null\n  }\n  return(\n    <div className={type === 'success' ? \"success\" :  \"error\"}>{message}</div>\n  )\n}\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ newSearch, setNewSearch ] = useState('')\n  const [ showFiltered, setShowFiltered ] = useState('false')\n  const [ message, setMessage] = useState('')\n  const [ messageType, setMessageType] = useState(null)\n\n  useEffect(() => {\n    axios\n      .get(phoneService.baseUrl)\n      .then(response => {\n        setPersons(response.data)\n      })\n  }, [])\n\n  const handleNameChange = (e) =>{\n    e.preventDefault();\n    setNewName(e.target.value)\n  }\n\n  const handleNumberChange = (e) =>{\n    e.preventDefault();\n    setNewNumber(e.target.value)\n  }\n\n  const handleSearchChange = (e) =>{\n    \n    setNewSearch(e.target.value);\n\n    if(newSearch.length){\n      setShowFiltered(true);\n    } else{\n      setShowFiltered(false); \n    }\n  }\n\n  const handleSubmit = (event) =>{\n    event.preventDefault();\n    const personObject = {\n      name: newName,\n      number: newNumber\n    }\n    \n    const inPersons = persons.some((x) => x.name === personObject.name);\n\n    if(inPersons){\n\n      const findUpdatedContact = persons.find((x) => x.name === personObject.name)\n\n      if(window.confirm(`Would you like to update the number for ${personObject.name}?`)){\n        phoneService.updateContact(findUpdatedContact.id, personObject)\n        .then(response => {\n          setPersons(persons.map((person) => person.id !== findUpdatedContact.id ? person : response.data))\n          setMessage(`Updated ${response.data.name}`);\n          setMessageType(`success`);\n          setTimeout(() =>{\n            setMessage(null);\n          }, 2000)\n        })\n        .catch(response =>{\n          setMessage(`Information of ${findUpdatedContact.name} has already been deleted`);\n          setMessageType(`fail`);\n          setTimeout(() =>{\n            setMessage(null);\n          }, 2000)\n        })\n      }\n      \n    } else{\n      phoneService.createContact(personObject)\n        .then(returnedContact => {\n          setPersons(persons.concat(returnedContact));\n          setMessage(`Added ${returnedContact.name}`);\n          setMessageType(`success`);\n          setTimeout(() =>{\n            setMessage(null);\n          }, 2000)\n          setNewName('');\n        })\n    }\n  }\n\n  const handleDelete = (x) => {\n    if(window.confirm(`Delete ${x.name}?`)){\n      return phoneService.deleteContact(x.id)\n      .then(deletedContact => {\n        const updatedPersons = persons.filter(person => person.id !== x.id)\n        setPersons(updatedPersons)\n      })\n    } else {\n      return;\n    }\n  }\n\n  const searchResult = showFiltered ? \n  persons.filter((x) => {\n    return x.name.toLowerCase().includes(newSearch.toLowerCase());\n  }) \n  : persons;\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <Notification message={message} type={messageType}/>\n      <Filter handleSearchChange={handleSearchChange} value={newSearch} />\n      <PersonForm handleSubmit={handleSubmit} handleNameChange={handleNameChange} handleNumberChange={handleNumberChange} nameValue={newName} numberValue={newNumber}/>\n      <h2>Numbers</h2>\n      <Persons handleDelete={handleDelete} searchResult={searchResult}/>\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}